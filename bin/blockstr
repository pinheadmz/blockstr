#!/usr/bin/env node
'use strict';

const {NodeClient} = require('bclient');
const fs = require('fs');
const path = require('path');
const os = require('os');
const {Keys, Event, Relay} = require('boogers');

const Art = require('../lib/art');

const file = path.join(os.homedir(), '.bitcoin', '.cookie');
const cookie = fs.readFileSync(file, 'ascii');
const [username, password] = cookie.split(':');

const hash = process.argv[2];

const clientOptions = {
  port: 8332,
  username,
  password
};

const client = new NodeClient(clientOptions);

const nsec = fs.readFileSync(
  path.join(__dirname, '..', 'conf', 'nsec.txt'),
  'ascii');
const keys = Keys.importNsec(nsec);

function LOG(msg) {
  process.stdout.write(msg);
}

(async () => {
  const block = await client.execute('getblock', [hash]);
  const art = new Art(block);
  art.draw();
  await art.print();
  LOG(`Art printed: ${art.filename()}\n`);

  fs.chmod(art.filename(), 0o777, () => {});

  const event = new Event();
  event.content = `https://thebitcoinblockclock.com/blockstr/${block.hash}.png`;
  event.sign(keys);

  LOG(`Event serialized: ${event.serialize()}\n`);

  await Relay.sendEventToRelays(
    event,
    [
      'wss://nos.lol',
      'wss://relay.damus.io',
      'wss://offchain.pub',
      'wss://eden.nostr.land',
      'wss://nostr.wine',
      'wss://brb.io',
      'wss://relay.current.fyi',
      'wss://relay.snort.social'
    ]);
})().catch((err) => {
  console.error(err.stack);
  process.exit(1);
});
